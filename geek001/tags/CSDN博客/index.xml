<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSDN博客 on 知识铺的博客</title>
    <link>https://index.zshipu.com/geek001/tags/CSDN%E5%8D%9A%E5%AE%A2/</link>
    <description>Recent content in CSDN博客 on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 31 Jul 2024 11:13:45 +0000</lastBuildDate>
    <atom:link href="https://index.zshipu.com/geek001/tags/CSDN%E5%8D%9A%E5%AE%A2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>领域驱动设计小记 -- 知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%B0%8F%E8%AE%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 11:13:45 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%B0%8F%E8%AE%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>分层架构设计的意义 分层架构设计是一种软件开发的约定，它通过定义不同层的职责和依赖关系来明确代码和组件的组织方式。这有助于保持系统的稳定性和可维护性。 1. 代码组织和职责划分分层架构将系统分为多个逻辑层，每层都有其特定的职责，例如：表示层、业务逻辑层和数据访问层。这种划分有助于减少层之</description>
    </item>
    <item>
      <title>DDD领域驱动设计在CSDN博客的介绍 -- 知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/DDD%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9C%A8CSDN%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BB%8B%E7%BB%8D--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 11:09:45 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/DDD%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9C%A8CSDN%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BB%8B%E7%BB%8D--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>领域驱动设计（DDD）概述 领域驱动设计简介领域驱动设计（Domain-Driven Design, DDD）是一种以业务领域知识为核心的软件开发方法论。它通过深入理解业务领域，将业务逻辑与技术实现分离，以提高软件的可维护性、可扩展性和适应性。 DDD的关键概念- 领域（Domain）：特定业务领域或</description>
    </item>
    <item>
      <title>领域驱动设计整体理解 -- 知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%95%B4%E4%BD%93%E7%90%86%E8%A7%A3--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 11:07:45 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%95%B4%E4%BD%93%E7%90%86%E8%A7%A3--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>领域驱动设计概述 领域驱动设计（Domain-Driven Design, DDD）是一种以业务领域为中心的软件开发方法论。它强调将业务知识与软件设计紧密结合，以实现软件系统与业务需求的高度一致性。 领域驱动设计的核心概念 领域（Domain）：指业务问题的范围或特定领域，是软件设计的核心。2. 驱动（</description>
    </item>
    <item>
      <title>领域驱动设计在B端营销系统的应用 -- 知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9C%A8B%E7%AB%AF%E8%90%A5%E9%94%80%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BA%94%E7%94%A8--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 11:06:45 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9C%A8B%E7%AB%AF%E8%90%A5%E9%94%80%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BA%94%E7%94%A8--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>插： AI时代，程序员或多或少要了解些人工智能，前些天发现了一个巨牛的人工智能学习网站，通俗易懂，风趣幽默，忍不住分享一下给大家(前言 – 人工智能教程 ) 坚持不懈，越努力越幸运，大家一起学习鸭~~~ 1 背景 通过营销活动实现客户/用户拉新、留存和促活是业界普遍采用的方法。为实现商户增长和留</description>
    </item>
    <item>
      <title>领域驱动设计（DDD）概述 -- 知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1DDD%E6%A6%82%E8%BF%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 10:59:45 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1DDD%E6%A6%82%E8%BF%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>领域驱动设计 (DDD) 目录 引言 核心概念 领域 子域 限界上下文 实体 值对象 聚合 聚合根 领域服务 领域事件 DDD 实践 识别领域 定义限界上下文 建模实体和值对象 设计聚合和聚合根 实现领域服务 处理领域事件 总结 引言 领域驱动设计（Domain-Driven Design，DDD）是一种软件设计方法论，旨在通过关注核心领域</description>
    </item>
    <item>
      <title>领域驱动设计理解 -- 知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%90%86%E8%A7%A3--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 10:58:45 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%90%86%E8%A7%A3--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>领域驱动设计概述 领域驱动设计（Domain Driven Design，简称DDD）是一种软件开发方法论，由埃里克·埃文斯（Eric Evans）在2004年通过其著作《领域驱动设计》提出。DDD的核心理念是软件的真正价值在于其解决领域问题的能力，而非其他功能特性。 领域驱动设计的核心思想 软件的核</description>
    </item>
  </channel>
</rss>
